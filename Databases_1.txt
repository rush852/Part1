CREATE TABLE Students(
	idnr VARCHAR(10) NOT NULL PRIMARY KEY,
	name TEXT NOT NULL,
	login TEXT NOT NULL,
	program TEXT NOT NULL
);

CREATE TABLE Branches(
	name TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY (name,program)
);

CREATE TABLE Courses(
	code TEXT NOT NULL PRIMARY KEY,
	name TEXT NOT NULL,
	credits INTEGER NOT NULL,
	department TEXT NOT NULL
);

CREATE TABLE LimitedCourses(
	code TEXT NOT NULL PRIMARY KEY REFERENCES Courses, --(Borde det vara REFERENCES Courses (name)??????)
	capacity INTEGER NOT NULL
)
--Lite osäker
CREATE TABLE StudentBranches(
	student TEXT NOT NULL PRIMARY KEY REFERENCES Students,
	branch TEXT,
	program TEXT NOT NULL,
	FOREIGN KEY (branch,program) REFERENCES Branches (name,program)
);

CREATE TABLE Classifications(
	name TEXT PRIMARY KEY
);

CREATE TABLE Classified(
	course TEXT NOT NULL REFERENCES courses (code),
	classification TEXT NOT NULL REFERENCES classifications (name),
	PRIMARY KEY (course,classification)
);

CREATE TABLE MandatoryProgram(
	course TEXT NOT NULL REFERENCES Courses (code),
	program TEXT NOT NULL,
	PRIMARY KEY (course,program)
);

CREATE TABLE MandatoryBranch(
	course TEXT NOT NULL REFERENCES Courses (code),
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY (course,branch,program),
	FOREIGN KEY (branch,program) REFERENCES Branches (name,program)
);

CREATE TABLE RecommendedBranch(
	course TEXT NOT NULL REFERENCES Courses (code),
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY (course,branch,program),
	FOREIGN KEY (branch,program) REFERENCES Branches (name,program)
);

CREATE TABLE Registered(
	student VARCHAR(10) NOT NULL REFERENCES Students (idnr),
	course TEXT NOT NULL REFERENCES Courses (code),
	PRIMARY KEY(student,course)
);
FUNKAR INTE
CREATE TABLE Taken(
	student VARCHAR(10) NOT NULL REFERENCES Students (idnr),
	course TEXT NOT NULL REFERENCES Courses (code),
	grade CHAR check (grade = 'U' OR grade = '3' OR grade = '4' OR grade´= '5'),
	PRIMARY KEY (student,course)
);

CREATE TABLE WaitingList(
	student VARCHAR(10) NOT NULL REFERENCES Students (idnr),
	course TEXT NOT NULL REFERENCES Limitedcourses (code),
	position SERIAL,
	PRIMARY KEY (student,course)
);

------------------------------------------------------------------------------------------

CREATE VIEW BasicInformation AS(
	SELECT idnr,name,login,students.program,branch 
	FROM students
	LEFT JOIN studentbranches
	ON students.idnr = studentbranches.student
	ORDER BY idnr ASC
);

CREATE VIEW FinishedCourses AS(
	SELECT student,course,grade,credits FROM taken
	LEFT JOIN courses
	ON courses.code = taken.course
);

CREATE VIEW PassedCourses AS(
	SELECT * FROM finishedcourses
	WHERE grade != 'U'
);
Osäker nästa
CREATE VIEW Registrations AS(
	SELECT student,course,'registered' AS status FROM registered
	UNION
	SELECT student,course,'waiting' AS status FROM waitinglist
	ORDER BY student ASC
);

CREATE VIEW UnreadMandatory AS (
	SELECT idnr,course FROM students
	LEFT JOIN mandatoryprogram
	ON students.program  = mandatoryprogram.program
	WHERE course IS NOT NULL
	UNION
	SELECT student,course FROM studentbranches
	LEFT JOIN mandatorybranch
	ON studentbranches.program = mandatorybranch.program 
	AND studentbranches.branch = mandatorybranch.branch
	WHERE course IS NOT NULL
	EXCEPT 
	SELECT student,course FROM passedcourses
	);

----
student,totalcredits
SELECT idnr,COALESCE(sum(finishedcourses.credits),0) AS totalCredits FROM students
LEFT JOIN finishedcourses
ON students.idnr = finishedcourses.student
GROUP BY idnr;

student,mandatoryLeft
SELECT students.idnr,COALESCE(count(unreadmandatory.idnr),0) AS mandatoryLeft FROM students
LEFT JOIN unreadmandatory
ON students.idnr = unreadmandatory.idnr
GROUP BY students.idnr;

----
FUNKAR INTE
SELECT student, COALESCE(sum(passedcourses.credits),0) AS mathCredits FROM passedcourses, classified
WHERE classified.classification = 'math' AND passedcourses.course = classified.course
GROUP BY student;

FUNKAR INTE HELLER 
SELECT student, COALESCE(sum(passedcourses.credits),0) AS mathCredits FROM passedcourses, classified
WHERE classified.classification = 'math'  AND passedcourses.course = classified.course
GROUP BY student
UNION
SELECT idnr, 0 AS mathCredits FROM students
ORDER BY student;

